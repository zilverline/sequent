#!/usr/bin/env ruby
require_relative '../lib/sequent/generator'

command = ARGV[0].to_s.strip
args = ARGV[1..-1].map(&:to_s).map(&:strip)
abort('Please specify a command. i.e. `sequent new myapp`') if command.empty?

def new_project(args)
  _args = args.dup
  name = _args.shift
  abort('Please specify a directory name. i.e. `sequent new myapp`') if name.empty?

  Sequent::Generator::Project.new(name).execute
  puts <<~NEXTSTEPS

    Success!

    Your brand spanking new sequent app is waiting for you in:
      #{File.expand_path(name, __dir__)}

    To finish setting up your app:
      cd #{name}
      bundle install
      bundle exec rake db:create db:migrate view_schema:build

    Run the example specs:
      RACK_ENV=test bundle exec rake db:create db:migrate view_schema:build
      bundle exec rspec spec

    To generate new aggregates use:
      sequent generate <aggregate_name>. e.g. sequent generate address

    For more information see:
      sequent.io

    Happy coding!

  NEXTSTEPS
end

def generate_aggregate(args)
  _args = args.dup
  aggregate_name = _args.shift
  abort('Please specify an aggregate name. i.e. `sequent g aggregate user`') if !aggregate_name || aggregate_name.empty?

  Sequent::Generator::Aggregate.new(aggregate_name).execute
  puts "#{aggregate_name} aggregate has been generated"
end

def generate_command(args)
  _args = args.dup
  aggregate_name = _args.shift
  command_name = _args.shift
  attrs = _args

  abort('Please specify an aggregate name and command name. i.e. `sequent g command user AddUser`') if !aggregate_name || !command_name || aggregate_name.empty? || command_name.empty?
  Sequent::Generator::Command.new(aggregate_name, command_name, attrs).execute
  puts "#{command_name} command has been added to #{aggregate_name}"
end

def generate_event(args)
  _args = args.dup
  aggregate_name = _args.shift
  event_name = _args.shift
  attrs = _args

  abort('Please specify an aggregate name and event name. i.e. `sequent g event user AddUser`') if !aggregate_name || !event_name || aggregate_name.empty? || event_name.empty?
  Sequent::Generator::Event.new(aggregate_name, event_name, attrs).execute
  puts "#{event_name} event has been added to #{aggregate_name}"
end

def generate(args)
  _args = args.dup
  entity = _args.shift
  abort('Please specify a command. i.e. `sequent g aggregate user`') if entity.empty?

  case entity
    when 'aggregate'
      generate_aggregate(_args)
    when 'command'
      generate_command(_args)
    when 'event'
      generate_event(_args)
    else
      abort("Unknown argument #{entity} for `generate`. Try `sequent g aggregate user`")
  end
end

case command
when 'new'
  new_project(args)
when 'generate', 'g'
  generate(args)
else
  abort("Unknown command #{command}. Try `sequent new myapp`")
end

